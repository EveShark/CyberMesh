// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.31.1
// source: control_evidence.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EvidenceRequestEvent represents control.evidence.v1 message from backend to AI service
// Purpose: Request additional evidence or notify AI of evidence validation results
// TODO: BACKEND - Implement producer (currently no backend implementation)
type EvidenceRequestEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request identification
	RequestId  string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`    // Unique request identifier (UUIDv4)
	AnomalyId  string `protobuf:"bytes,2,opt,name=anomaly_id,json=anomalyId,proto3" json:"anomaly_id,omitempty"`    // Related anomaly ID (if applicable)
	EvidenceId string `protobuf:"bytes,3,opt,name=evidence_id,json=evidenceId,proto3" json:"evidence_id,omitempty"` // Related evidence ID (if applicable)
	// Request type
	RequestType string `protobuf:"bytes,4,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"` // Request type:
	// For request_additional
	RequestedTypes []string `protobuf:"bytes,5,rep,name=requested_types,json=requestedTypes,proto3" json:"requested_types,omitempty"` // Requested evidence types
	RequestReason  string   `protobuf:"bytes,6,opt,name=request_reason,json=requestReason,proto3" json:"request_reason,omitempty"`    // Human-readable reason for request
	DeadlineTs     int64    `protobuf:"varint,7,opt,name=deadline_ts,json=deadlineTs,proto3" json:"deadline_ts,omitempty"`            // Unix timestamp deadline for response (0 = no deadline)
	// For validation_result
	EvidenceAccepted     bool   `protobuf:"varint,8,opt,name=evidence_accepted,json=evidenceAccepted,proto3" json:"evidence_accepted,omitempty"`                // True if evidence accepted, false if rejected
	RejectionReason      string `protobuf:"bytes,9,opt,name=rejection_reason,json=rejectionReason,proto3" json:"rejection_reason,omitempty"`                    // Reason for rejection (if applicable)
	EvidenceQualityScore uint32 `protobuf:"varint,10,opt,name=evidence_quality_score,json=evidenceQualityScore,proto3" json:"evidence_quality_score,omitempty"` // Quality score 1-10 (1=poor, 10=excellent)
	// For challenge
	ChallengeReason string `protobuf:"bytes,11,opt,name=challenge_reason,json=challengeReason,proto3" json:"challenge_reason,omitempty"` // Reason for challenging evidence
	ChallengeData   []byte `protobuf:"bytes,12,opt,name=challenge_data,json=challengeData,proto3" json:"challenge_data,omitempty"`       // Additional data supporting challenge
	// Metadata
	Timestamp   int64 `protobuf:"varint,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                        // Unix timestamp (seconds)
	BlockHeight int64 `protobuf:"varint,14,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"` // Block height of related transaction
	// Cryptographic envelope
	ProducerId    []byte `protobuf:"bytes,15,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"` // Backend node public key (32 bytes Ed25519)
	Signature     []byte `protobuf:"bytes,16,opt,name=signature,proto3" json:"signature,omitempty"`                     // Ed25519 signature (64 bytes)
	Pubkey        []byte `protobuf:"bytes,17,opt,name=pubkey,proto3" json:"pubkey,omitempty"`                           // Ed25519 public key (32 bytes)
	Alg           string `protobuf:"bytes,18,opt,name=alg,proto3" json:"alg,omitempty"`                                 // Signature algorithm "Ed25519"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvidenceRequestEvent) Reset() {
	*x = EvidenceRequestEvent{}
	mi := &file_control_evidence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvidenceRequestEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceRequestEvent) ProtoMessage() {}

func (x *EvidenceRequestEvent) ProtoReflect() protoreflect.Message {
	mi := &file_control_evidence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceRequestEvent.ProtoReflect.Descriptor instead.
func (*EvidenceRequestEvent) Descriptor() ([]byte, []int) {
	return file_control_evidence_proto_rawDescGZIP(), []int{0}
}

func (x *EvidenceRequestEvent) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *EvidenceRequestEvent) GetAnomalyId() string {
	if x != nil {
		return x.AnomalyId
	}
	return ""
}

func (x *EvidenceRequestEvent) GetEvidenceId() string {
	if x != nil {
		return x.EvidenceId
	}
	return ""
}

func (x *EvidenceRequestEvent) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *EvidenceRequestEvent) GetRequestedTypes() []string {
	if x != nil {
		return x.RequestedTypes
	}
	return nil
}

func (x *EvidenceRequestEvent) GetRequestReason() string {
	if x != nil {
		return x.RequestReason
	}
	return ""
}

func (x *EvidenceRequestEvent) GetDeadlineTs() int64 {
	if x != nil {
		return x.DeadlineTs
	}
	return 0
}

func (x *EvidenceRequestEvent) GetEvidenceAccepted() bool {
	if x != nil {
		return x.EvidenceAccepted
	}
	return false
}

func (x *EvidenceRequestEvent) GetRejectionReason() string {
	if x != nil {
		return x.RejectionReason
	}
	return ""
}

func (x *EvidenceRequestEvent) GetEvidenceQualityScore() uint32 {
	if x != nil {
		return x.EvidenceQualityScore
	}
	return 0
}

func (x *EvidenceRequestEvent) GetChallengeReason() string {
	if x != nil {
		return x.ChallengeReason
	}
	return ""
}

func (x *EvidenceRequestEvent) GetChallengeData() []byte {
	if x != nil {
		return x.ChallengeData
	}
	return nil
}

func (x *EvidenceRequestEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EvidenceRequestEvent) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *EvidenceRequestEvent) GetProducerId() []byte {
	if x != nil {
		return x.ProducerId
	}
	return nil
}

func (x *EvidenceRequestEvent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *EvidenceRequestEvent) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *EvidenceRequestEvent) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

var File_control_evidence_proto protoreflect.FileDescriptor

const file_control_evidence_proto_rawDesc = "" +
	"\n" +
	"\x16control_evidence.proto\x12\x14cybermesh.control.v1\"\x93\x05\n" +
	"\x14EvidenceRequestEvent\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\tR\trequestId\x12\x1d\n" +
	"\n" +
	"anomaly_id\x18\x02 \x01(\tR\tanomalyId\x12\x1f\n" +
	"\vevidence_id\x18\x03 \x01(\tR\n" +
	"evidenceId\x12!\n" +
	"\frequest_type\x18\x04 \x01(\tR\vrequestType\x12'\n" +
	"\x0frequested_types\x18\x05 \x03(\tR\x0erequestedTypes\x12%\n" +
	"\x0erequest_reason\x18\x06 \x01(\tR\rrequestReason\x12\x1f\n" +
	"\vdeadline_ts\x18\a \x01(\x03R\n" +
	"deadlineTs\x12+\n" +
	"\x11evidence_accepted\x18\b \x01(\bR\x10evidenceAccepted\x12)\n" +
	"\x10rejection_reason\x18\t \x01(\tR\x0frejectionReason\x124\n" +
	"\x16evidence_quality_score\x18\n" +
	" \x01(\rR\x14evidenceQualityScore\x12)\n" +
	"\x10challenge_reason\x18\v \x01(\tR\x0fchallengeReason\x12%\n" +
	"\x0echallenge_data\x18\f \x01(\fR\rchallengeData\x12\x1c\n" +
	"\ttimestamp\x18\r \x01(\x03R\ttimestamp\x12!\n" +
	"\fblock_height\x18\x0e \x01(\x03R\vblockHeight\x12\x1f\n" +
	"\vproducer_id\x18\x0f \x01(\fR\n" +
	"producerId\x12\x1c\n" +
	"\tsignature\x18\x10 \x01(\fR\tsignature\x12\x16\n" +
	"\x06pubkey\x18\x11 \x01(\fR\x06pubkey\x12\x10\n" +
	"\x03alg\x18\x12 \x01(\tR\x03algB\x12Z\x10backend/proto;pbb\x06proto3"

var (
	file_control_evidence_proto_rawDescOnce sync.Once
	file_control_evidence_proto_rawDescData []byte
)

func file_control_evidence_proto_rawDescGZIP() []byte {
	file_control_evidence_proto_rawDescOnce.Do(func() {
		file_control_evidence_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_control_evidence_proto_rawDesc), len(file_control_evidence_proto_rawDesc)))
	})
	return file_control_evidence_proto_rawDescData
}

var file_control_evidence_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_control_evidence_proto_goTypes = []any{
	(*EvidenceRequestEvent)(nil), // 0: cybermesh.control.v1.EvidenceRequestEvent
}
var file_control_evidence_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_control_evidence_proto_init() }
func file_control_evidence_proto_init() {
	if File_control_evidence_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_control_evidence_proto_rawDesc), len(file_control_evidence_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_control_evidence_proto_goTypes,
		DependencyIndexes: file_control_evidence_proto_depIdxs,
		MessageInfos:      file_control_evidence_proto_msgTypes,
	}.Build()
	File_control_evidence_proto = out.File
	file_control_evidence_proto_goTypes = nil
	file_control_evidence_proto_depIdxs = nil
}
