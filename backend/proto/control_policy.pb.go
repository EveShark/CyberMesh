// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.31.1
// source: control_policy.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PolicyUpdateEvent represents control.policy.v1 message from backend to AI service
// Purpose: Update AI detection rules/policies dynamically
// TODO: BACKEND - Implement producer (currently no backend implementation)
type PolicyUpdateEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policy identification
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"` // Policy unique identifier
	Action   string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                     // "add", "remove", "update", "enable", "disable"
	// Policy content
	RuleType string `protobuf:"bytes,3,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"` // Rule type:
	RuleData []byte `protobuf:"bytes,4,opt,name=rule_data,json=ruleData,proto3" json:"rule_data,omitempty"` // JSON-encoded rule parameters
	// Validation and rollback
	RuleHash         []byte `protobuf:"bytes,5,opt,name=rule_hash,json=ruleHash,proto3" json:"rule_hash,omitempty"`                           // SHA-256 of rule_data for validation (32 bytes)
	RequiresAck      bool   `protobuf:"varint,6,opt,name=requires_ack,json=requiresAck,proto3" json:"requires_ack,omitempty"`                 // True if AI service must acknowledge successful application
	RollbackPolicyId string `protobuf:"bytes,7,opt,name=rollback_policy_id,json=rollbackPolicyId,proto3" json:"rollback_policy_id,omitempty"` // Policy to revert to if this fails (optional)
	// Timing and scope
	Timestamp        int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                        // Unix timestamp (seconds)
	EffectiveHeight  int64 `protobuf:"varint,9,opt,name=effective_height,json=effectiveHeight,proto3" json:"effective_height,omitempty"`     // Block height when policy takes effect
	ExpirationHeight int64 `protobuf:"varint,10,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"` // Block height when policy expires (0 = no expiration)
	// Cryptographic envelope
	ProducerId    []byte `protobuf:"bytes,11,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"` // Backend node public key (32 bytes Ed25519)
	Signature     []byte `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`                     // Ed25519 signature (64 bytes)
	Pubkey        []byte `protobuf:"bytes,13,opt,name=pubkey,proto3" json:"pubkey,omitempty"`                           // Ed25519 public key (32 bytes)
	Alg           string `protobuf:"bytes,14,opt,name=alg,proto3" json:"alg,omitempty"`                                 // Signature algorithm "Ed25519"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyUpdateEvent) Reset() {
	*x = PolicyUpdateEvent{}
	mi := &file_control_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyUpdateEvent) ProtoMessage() {}

func (x *PolicyUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_control_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyUpdateEvent.ProtoReflect.Descriptor instead.
func (*PolicyUpdateEvent) Descriptor() ([]byte, []int) {
	return file_control_policy_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyUpdateEvent) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyUpdateEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PolicyUpdateEvent) GetRuleType() string {
	if x != nil {
		return x.RuleType
	}
	return ""
}

func (x *PolicyUpdateEvent) GetRuleData() []byte {
	if x != nil {
		return x.RuleData
	}
	return nil
}

func (x *PolicyUpdateEvent) GetRuleHash() []byte {
	if x != nil {
		return x.RuleHash
	}
	return nil
}

func (x *PolicyUpdateEvent) GetRequiresAck() bool {
	if x != nil {
		return x.RequiresAck
	}
	return false
}

func (x *PolicyUpdateEvent) GetRollbackPolicyId() string {
	if x != nil {
		return x.RollbackPolicyId
	}
	return ""
}

func (x *PolicyUpdateEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PolicyUpdateEvent) GetEffectiveHeight() int64 {
	if x != nil {
		return x.EffectiveHeight
	}
	return 0
}

func (x *PolicyUpdateEvent) GetExpirationHeight() int64 {
	if x != nil {
		return x.ExpirationHeight
	}
	return 0
}

func (x *PolicyUpdateEvent) GetProducerId() []byte {
	if x != nil {
		return x.ProducerId
	}
	return nil
}

func (x *PolicyUpdateEvent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PolicyUpdateEvent) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *PolicyUpdateEvent) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

var File_control_policy_proto protoreflect.FileDescriptor

const file_control_policy_proto_rawDesc = "" +
	"\n" +
	"\x14control_policy.proto\x12\x14cybermesh.control.v1\"\xcf\x03\n" +
	"\x11PolicyUpdateEvent\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\tR\bpolicyId\x12\x16\n" +
	"\x06action\x18\x02 \x01(\tR\x06action\x12\x1b\n" +
	"\trule_type\x18\x03 \x01(\tR\bruleType\x12\x1b\n" +
	"\trule_data\x18\x04 \x01(\fR\bruleData\x12\x1b\n" +
	"\trule_hash\x18\x05 \x01(\fR\bruleHash\x12!\n" +
	"\frequires_ack\x18\x06 \x01(\bR\vrequiresAck\x12,\n" +
	"\x12rollback_policy_id\x18\a \x01(\tR\x10rollbackPolicyId\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x03R\ttimestamp\x12)\n" +
	"\x10effective_height\x18\t \x01(\x03R\x0feffectiveHeight\x12+\n" +
	"\x11expiration_height\x18\n" +
	" \x01(\x03R\x10expirationHeight\x12\x1f\n" +
	"\vproducer_id\x18\v \x01(\fR\n" +
	"producerId\x12\x1c\n" +
	"\tsignature\x18\f \x01(\fR\tsignature\x12\x16\n" +
	"\x06pubkey\x18\r \x01(\fR\x06pubkey\x12\x10\n" +
	"\x03alg\x18\x0e \x01(\tR\x03algB\x12Z\x10backend/proto;pbb\x06proto3"

var (
	file_control_policy_proto_rawDescOnce sync.Once
	file_control_policy_proto_rawDescData []byte
)

func file_control_policy_proto_rawDescGZIP() []byte {
	file_control_policy_proto_rawDescOnce.Do(func() {
		file_control_policy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_control_policy_proto_rawDesc), len(file_control_policy_proto_rawDesc)))
	})
	return file_control_policy_proto_rawDescData
}

var file_control_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_control_policy_proto_goTypes = []any{
	(*PolicyUpdateEvent)(nil), // 0: cybermesh.control.v1.PolicyUpdateEvent
}
var file_control_policy_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_control_policy_proto_init() }
func file_control_policy_proto_init() {
	if File_control_policy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_control_policy_proto_rawDesc), len(file_control_policy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_control_policy_proto_goTypes,
		DependencyIndexes: file_control_policy_proto_depIdxs,
		MessageInfos:      file_control_policy_proto_msgTypes,
	}.Build()
	File_control_policy_proto = out.File
	file_control_policy_proto_goTypes = nil
	file_control_policy_proto_depIdxs = nil
}
