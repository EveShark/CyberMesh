// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.31.1
// source: ai_evidence.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChainOfCustodyEntry represents a single entry in evidence chain-of-custody
type ChainOfCustodyEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefHash       []byte                 `protobuf:"bytes,1,opt,name=ref_hash,json=refHash,proto3" json:"ref_hash,omitempty"` // Reference hash (32 bytes SHA-256)
	ActorId       []byte                 `protobuf:"bytes,2,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"` // Actor public key (32 bytes Ed25519)
	Ts            int64                  `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`                         // Unix timestamp (seconds)
	Signature     []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`            // Ed25519 signature (64 bytes)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainOfCustodyEntry) Reset() {
	*x = ChainOfCustodyEntry{}
	mi := &file_ai_evidence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainOfCustodyEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainOfCustodyEntry) ProtoMessage() {}

func (x *ChainOfCustodyEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ai_evidence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainOfCustodyEntry.ProtoReflect.Descriptor instead.
func (*ChainOfCustodyEntry) Descriptor() ([]byte, []int) {
	return file_ai_evidence_proto_rawDescGZIP(), []int{0}
}

func (x *ChainOfCustodyEntry) GetRefHash() []byte {
	if x != nil {
		return x.RefHash
	}
	return nil
}

func (x *ChainOfCustodyEntry) GetActorId() []byte {
	if x != nil {
		return x.ActorId
	}
	return nil
}

func (x *ChainOfCustodyEntry) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *ChainOfCustodyEntry) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// EvidenceEvent represents ai.evidence.v1 message from AI service to backend
// Backend consumer: backend/pkg/ingest/kafka/consumer.go
// Backend validator: backend/pkg/ingest/kafka/verifier.go
type EvidenceEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message identification
	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // Evidence unique identifier (UUIDv4)
	EvidenceType string `protobuf:"bytes,2,opt,name=evidence_type,json=evidenceType,proto3" json:"evidence_type,omitempty"` // Evidence type (e.g., "pcap", "log", "network_flow")
	// References and data
	Refs      [][]byte `protobuf:"bytes,3,rep,name=refs,proto3" json:"refs,omitempty"`                            // References to related anomalies/evidence (32 bytes SHA-256 each, max 1000)
	ProofBlob []byte   `protobuf:"bytes,4,opt,name=proof_blob,json=proofBlob,proto3" json:"proof_blob,omitempty"` // Binary proof data (PCAP, logs, etc., max 256KB)
	// Chain of custody
	Coc []*ChainOfCustodyEntry `protobuf:"bytes,5,rep,name=coc,proto3" json:"coc,omitempty"` // Chain-of-custody trail (max 100 entries)
	// Timing
	Ts int64 `protobuf:"varint,6,opt,name=ts,proto3" json:"ts,omitempty"` // Unix timestamp (seconds)
	// Cryptographic envelope
	ContentHash   []byte `protobuf:"bytes,7,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"` // SHA-256 of proof_blob (32 bytes)
	ProducerId    []byte `protobuf:"bytes,8,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"`    // AI node public key (32 bytes Ed25519)
	Nonce         []byte `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`                                // Unique nonce (16 bytes binary)
	Signature     []byte `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`                       // Ed25519 signature (64 bytes)
	Pubkey        []byte `protobuf:"bytes,11,opt,name=pubkey,proto3" json:"pubkey,omitempty"`                             // Ed25519 public key (32 bytes)
	Alg           string `protobuf:"bytes,12,opt,name=alg,proto3" json:"alg,omitempty"`                                   // Signature algorithm "Ed25519"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EvidenceEvent) Reset() {
	*x = EvidenceEvent{}
	mi := &file_ai_evidence_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EvidenceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceEvent) ProtoMessage() {}

func (x *EvidenceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ai_evidence_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceEvent.ProtoReflect.Descriptor instead.
func (*EvidenceEvent) Descriptor() ([]byte, []int) {
	return file_ai_evidence_proto_rawDescGZIP(), []int{1}
}

func (x *EvidenceEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EvidenceEvent) GetEvidenceType() string {
	if x != nil {
		return x.EvidenceType
	}
	return ""
}

func (x *EvidenceEvent) GetRefs() [][]byte {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *EvidenceEvent) GetProofBlob() []byte {
	if x != nil {
		return x.ProofBlob
	}
	return nil
}

func (x *EvidenceEvent) GetCoc() []*ChainOfCustodyEntry {
	if x != nil {
		return x.Coc
	}
	return nil
}

func (x *EvidenceEvent) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *EvidenceEvent) GetContentHash() []byte {
	if x != nil {
		return x.ContentHash
	}
	return nil
}

func (x *EvidenceEvent) GetProducerId() []byte {
	if x != nil {
		return x.ProducerId
	}
	return nil
}

func (x *EvidenceEvent) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *EvidenceEvent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *EvidenceEvent) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *EvidenceEvent) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

var File_ai_evidence_proto protoreflect.FileDescriptor

const file_ai_evidence_proto_rawDesc = "" +
	"\n" +
	"\x11ai_evidence.proto\x12\x0fcybermesh.ai.v1\"y\n" +
	"\x13ChainOfCustodyEntry\x12\x19\n" +
	"\bref_hash\x18\x01 \x01(\fR\arefHash\x12\x19\n" +
	"\bactor_id\x18\x02 \x01(\fR\aactorId\x12\x0e\n" +
	"\x02ts\x18\x03 \x01(\x03R\x02ts\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\"\xe1\x02\n" +
	"\rEvidenceEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\revidence_type\x18\x02 \x01(\tR\fevidenceType\x12\x12\n" +
	"\x04refs\x18\x03 \x03(\fR\x04refs\x12\x1d\n" +
	"\n" +
	"proof_blob\x18\x04 \x01(\fR\tproofBlob\x126\n" +
	"\x03coc\x18\x05 \x03(\v2$.cybermesh.ai.v1.ChainOfCustodyEntryR\x03coc\x12\x0e\n" +
	"\x02ts\x18\x06 \x01(\x03R\x02ts\x12!\n" +
	"\fcontent_hash\x18\a \x01(\fR\vcontentHash\x12\x1f\n" +
	"\vproducer_id\x18\b \x01(\fR\n" +
	"producerId\x12\x14\n" +
	"\x05nonce\x18\t \x01(\fR\x05nonce\x12\x1c\n" +
	"\tsignature\x18\n" +
	" \x01(\fR\tsignature\x12\x16\n" +
	"\x06pubkey\x18\v \x01(\fR\x06pubkey\x12\x10\n" +
	"\x03alg\x18\f \x01(\tR\x03algB\x12Z\x10backend/proto;pbb\x06proto3"

var (
	file_ai_evidence_proto_rawDescOnce sync.Once
	file_ai_evidence_proto_rawDescData []byte
)

func file_ai_evidence_proto_rawDescGZIP() []byte {
	file_ai_evidence_proto_rawDescOnce.Do(func() {
		file_ai_evidence_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ai_evidence_proto_rawDesc), len(file_ai_evidence_proto_rawDesc)))
	})
	return file_ai_evidence_proto_rawDescData
}

var file_ai_evidence_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ai_evidence_proto_goTypes = []any{
	(*ChainOfCustodyEntry)(nil), // 0: cybermesh.ai.v1.ChainOfCustodyEntry
	(*EvidenceEvent)(nil),       // 1: cybermesh.ai.v1.EvidenceEvent
}
var file_ai_evidence_proto_depIdxs = []int32{
	0, // 0: cybermesh.ai.v1.EvidenceEvent.coc:type_name -> cybermesh.ai.v1.ChainOfCustodyEntry
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_ai_evidence_proto_init() }
func file_ai_evidence_proto_init() {
	if File_ai_evidence_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ai_evidence_proto_rawDesc), len(file_ai_evidence_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ai_evidence_proto_goTypes,
		DependencyIndexes: file_ai_evidence_proto_depIdxs,
		MessageInfos:      file_ai_evidence_proto_msgTypes,
	}.Build()
	File_ai_evidence_proto = out.File
	file_ai_evidence_proto_goTypes = nil
	file_ai_evidence_proto_depIdxs = nil
}
