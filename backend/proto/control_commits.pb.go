// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.31.1
// source: control_commits.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CommitEvent represents control.commits.v1 message from backend to AI service
// Purpose: Notify AI service that backend committed a block with AI-submitted transactions
// TODO: BACKEND - Implement producer in backend/pkg/ingest/kafka/producer.go
// Current backend: 84-byte ad-hoc binary (height, hash, root, count, ts)
// Target: Replace with this signed protobuf message
type CommitEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Block information
	Height    int64  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`                       // Block height
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"` // Block hash (32 bytes SHA-256)
	StateRoot []byte `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"` // State merkle root (32 bytes SHA-256)
	TxCount   uint32 `protobuf:"varint,4,opt,name=tx_count,json=txCount,proto3" json:"tx_count,omitempty"`      // Total transactions in block
	// Transaction breakdown (optional)
	AnomalyCount  uint32 `protobuf:"varint,5,opt,name=anomaly_count,json=anomalyCount,proto3" json:"anomaly_count,omitempty"`    // Number of anomaly transactions committed
	EvidenceCount uint32 `protobuf:"varint,6,opt,name=evidence_count,json=evidenceCount,proto3" json:"evidence_count,omitempty"` // Number of evidence transactions committed
	PolicyCount   uint32 `protobuf:"varint,7,opt,name=policy_count,json=policyCount,proto3" json:"policy_count,omitempty"`       // Number of policy transactions committed
	// Timing
	Timestamp int64 `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp (seconds)
	// Cryptographic envelope
	ProducerId    []byte `protobuf:"bytes,9,opt,name=producer_id,json=producerId,proto3" json:"producer_id,omitempty"` // Backend node public key (32 bytes Ed25519)
	Signature     []byte `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`                    // Ed25519 signature (64 bytes)
	Pubkey        []byte `protobuf:"bytes,11,opt,name=pubkey,proto3" json:"pubkey,omitempty"`                          // Ed25519 public key (32 bytes)
	Alg           string `protobuf:"bytes,12,opt,name=alg,proto3" json:"alg,omitempty"`                                // Signature algorithm "Ed25519"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitEvent) Reset() {
	*x = CommitEvent{}
	mi := &file_control_commits_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitEvent) ProtoMessage() {}

func (x *CommitEvent) ProtoReflect() protoreflect.Message {
	mi := &file_control_commits_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitEvent.ProtoReflect.Descriptor instead.
func (*CommitEvent) Descriptor() ([]byte, []int) {
	return file_control_commits_proto_rawDescGZIP(), []int{0}
}

func (x *CommitEvent) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CommitEvent) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *CommitEvent) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *CommitEvent) GetTxCount() uint32 {
	if x != nil {
		return x.TxCount
	}
	return 0
}

func (x *CommitEvent) GetAnomalyCount() uint32 {
	if x != nil {
		return x.AnomalyCount
	}
	return 0
}

func (x *CommitEvent) GetEvidenceCount() uint32 {
	if x != nil {
		return x.EvidenceCount
	}
	return 0
}

func (x *CommitEvent) GetPolicyCount() uint32 {
	if x != nil {
		return x.PolicyCount
	}
	return 0
}

func (x *CommitEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CommitEvent) GetProducerId() []byte {
	if x != nil {
		return x.ProducerId
	}
	return nil
}

func (x *CommitEvent) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *CommitEvent) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *CommitEvent) GetAlg() string {
	if x != nil {
		return x.Alg
	}
	return ""
}

var File_control_commits_proto protoreflect.FileDescriptor

const file_control_commits_proto_rawDesc = "" +
	"\n" +
	"\x15control_commits.proto\x12\x14cybermesh.control.v1\"\xf4\x02\n" +
	"\vCommitEvent\x12\x16\n" +
	"\x06height\x18\x01 \x01(\x03R\x06height\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x02 \x01(\fR\tblockHash\x12\x1d\n" +
	"\n" +
	"state_root\x18\x03 \x01(\fR\tstateRoot\x12\x19\n" +
	"\btx_count\x18\x04 \x01(\rR\atxCount\x12#\n" +
	"\ranomaly_count\x18\x05 \x01(\rR\fanomalyCount\x12%\n" +
	"\x0eevidence_count\x18\x06 \x01(\rR\revidenceCount\x12!\n" +
	"\fpolicy_count\x18\a \x01(\rR\vpolicyCount\x12\x1c\n" +
	"\ttimestamp\x18\b \x01(\x03R\ttimestamp\x12\x1f\n" +
	"\vproducer_id\x18\t \x01(\fR\n" +
	"producerId\x12\x1c\n" +
	"\tsignature\x18\n" +
	" \x01(\fR\tsignature\x12\x16\n" +
	"\x06pubkey\x18\v \x01(\fR\x06pubkey\x12\x10\n" +
	"\x03alg\x18\f \x01(\tR\x03algB\x12Z\x10backend/proto;pbb\x06proto3"

var (
	file_control_commits_proto_rawDescOnce sync.Once
	file_control_commits_proto_rawDescData []byte
)

func file_control_commits_proto_rawDescGZIP() []byte {
	file_control_commits_proto_rawDescOnce.Do(func() {
		file_control_commits_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_control_commits_proto_rawDesc), len(file_control_commits_proto_rawDesc)))
	})
	return file_control_commits_proto_rawDescData
}

var file_control_commits_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_control_commits_proto_goTypes = []any{
	(*CommitEvent)(nil), // 0: cybermesh.control.v1.CommitEvent
}
var file_control_commits_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_control_commits_proto_init() }
func file_control_commits_proto_init() {
	if File_control_commits_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_control_commits_proto_rawDesc), len(file_control_commits_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_control_commits_proto_goTypes,
		DependencyIndexes: file_control_commits_proto_depIdxs,
		MessageInfos:      file_control_commits_proto_msgTypes,
	}.Build()
	File_control_commits_proto = out.File
	file_control_commits_proto_goTypes = nil
	file_control_commits_proto_depIdxs = nil
}
