apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: validator
  namespace: cybermesh
  labels:
    app: consensus-backend
    component: validator
spec:
  serviceName: validator-headless
  replicas: 5
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: consensus-backend
      component: validator
  template:
    metadata:
      labels:
        app: consensus-backend
        component: validator
    spec:
      serviceAccountName: cybermesh-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      initContainers:
      # Wait for CockroachDB connectivity
      - name: wait-for-db
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Waiting for CockroachDB connectivity..."
          until nc -z cybermesh-threats-8958.jxf.gcp-asia-southeast1.cockroachlabs.cloud 26257; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Database is reachable!"

      containers:
      - name: validator
        image: cybermesh-backend:latest
        imagePullPolicy: Never

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL

        command: ["/bin/sh", "-c"]
        args:
        - |
          # Derive NODE_ID from pod ordinal (validator-0 -> NODE_ID=1)
          POD_ORDINAL=$(echo $HOSTNAME | grep -o '[0-9]*$')
          export NODE_ID=$((POD_ORDINAL + 1))

          # Set per-node CRYPTO_SIGNING_KEY_HEX based on NODE_ID
          case $NODE_ID in
            1) export CRYPTO_SIGNING_KEY_HEX=$CRYPTO_SIGNING_KEY_HEX_1 ;;
            2) export CRYPTO_SIGNING_KEY_HEX=$CRYPTO_SIGNING_KEY_HEX_2 ;;
            3) export CRYPTO_SIGNING_KEY_HEX=$CRYPTO_SIGNING_KEY_HEX_3 ;;
            4) export CRYPTO_SIGNING_KEY_HEX=$CRYPTO_SIGNING_KEY_HEX_4 ;;
            5) export CRYPTO_SIGNING_KEY_HEX=$CRYPTO_SIGNING_KEY_HEX_5 ;;
          esac

          echo "Starting validator with NODE_ID=$NODE_ID"
          exec /app/cybermesh

        env:
        # Pod metadata
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        # API Configuration
        - name: API_PORT
          value: "9441"
        - name: API_LISTEN_ADDR
          value: ":9441"
        
        # Per-node signing keys (used by shell script in args)
        - name: CRYPTO_SIGNING_KEY_HEX_1
          valueFrom:
            secretKeyRef:
              name: cybermesh-secrets
              key: CRYPTO_SIGNING_KEY_HEX_1
        - name: CRYPTO_SIGNING_KEY_HEX_2
          valueFrom:
            secretKeyRef:
              name: cybermesh-secrets
              key: CRYPTO_SIGNING_KEY_HEX_2
        - name: CRYPTO_SIGNING_KEY_HEX_3
          valueFrom:
            secretKeyRef:
              name: cybermesh-secrets
              key: CRYPTO_SIGNING_KEY_HEX_3
        - name: CRYPTO_SIGNING_KEY_HEX_4
          valueFrom:
            secretKeyRef:
              name: cybermesh-secrets
              key: CRYPTO_SIGNING_KEY_HEX_4
        - name: CRYPTO_SIGNING_KEY_HEX_5
          valueFrom:
            secretKeyRef:
              name: cybermesh-secrets
              key: CRYPTO_SIGNING_KEY_HEX_5
        
        # Import all ConfigMap values
        envFrom:
        - configMapRef:
            name: cybermesh-config
        - secretRef:
            name: cybermesh-secrets
        - secretRef:
            name: validator-pubkeys
        
        ports:
        - name: api
          containerPort: 9441
          protocol: TCP
        - name: p2p
          containerPort: 8001
          protocol: TCP
        - name: metrics
          containerPort: 9100
          protocol: TCP
        
        volumeMounts:
        # Mount validator signing keys
        - name: validator-keys
          mountPath: /app/keys
          readOnly: true
        # Mount CockroachDB root certificate
        - name: db-certs
          mountPath: /app/certs
          readOnly: true
        # Logs (emptyDir for ephemeral logs)
        - name: logs
          mountPath: /app/logs
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: api
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: api
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        
        startupProbe:
          httpGet:
            path: /api/v1/health
            port: api
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
      
      volumes:
      # Validator signing keys (from Secret)
      - name: validator-keys
        secret:
          secretName: validator-keys
          defaultMode: 0400
      # CockroachDB root certificate
      - name: db-certs
        configMap:
          name: db-root-cert
          defaultMode: 0444
      # Logs volume comes from volumeClaimTemplates (PVC)
      
      # Pod anti-affinity: Spread validators across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - validator
              topologyKey: kubernetes.io/hostname
  
  # Persistent storage for logs (survives pod restarts)
  volumeClaimTemplates:
  - metadata:
      name: logs
      labels:
        app: consensus-backend
        component: validator
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "oci-bv"
      resources:
        requests:
          storage: 1Gi
